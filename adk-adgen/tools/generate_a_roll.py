import asyncio
import requests
import os
from dotenv import load_dotenv
from google.adk.tools import ToolContext
from google.genai import types

load_dotenv()
HEYGEN_API_KEY = os.getenv("HEYGEN_API_KEY")


async def generate_a_roll(prompt: str, tool_context: ToolContext) -> str:
    """
    Generates A-roll footage using HeyGen's avatar API.

    Args:
        prompt (str): A-roll footage portion of the AV script generated by 'script_agent'
        tool_context: Tool context to access avatar ID, voice ID, video width, and video height stored in state
    Returns:
        str: Status message (success/failure of API call)
    """

    # Step 1: Get IDs and dimensions from state (assumed to be saved by root after pass from frontend)
    avatar_id = tool_context.state.get("avatar_id", "Abigail_expressive_2024112501")
    voice_id = tool_context.state.get("voice_id", "119caed25533477ba63822d5d1552d25")
    width = tool_context.state.get("width", 1280)
    height = tool_context.state.get("height", 720)

    # Step 2: Generate video
    url = "https://api.heygen.com/v2/video/generate"

    headers = {"X-Api-Key": HEYGEN_API_KEY, "Content-Type": "application/json"}

    payload = {
        "caption": True,
        "video_inputs": [
            {
                "character": {
                    "type": "avatar",
                    "avatar_id": avatar_id,
                    "avatar_style": "normal",
                },
                "voice": {
                    "type": "text",
                    "input_text": prompt,
                    "voice_id": voice_id,
                    "speed": 1,
                },
            }
        ],
        "dimension": {"width": width, "height": height},
    }

    response = requests.post(url, headers=headers, json=payload)
    response_data = (
        response.json()
    )  # Convert to JSON (requests doesn't give back JSON data directly)

    video_id = response_data.get("data", {}).get("video_id")

    status_url = f"https://api.heygen.com/v1/video_status.get?video_id={video_id}"

    # Step 3: Save video
    max_attempts = 60

    for _ in range(max_attempts):
        status_response = requests.get(status_url, headers=headers)
        status_data = status_response.json()
        print(f"STATUS DATA {status_data}")
        status = status_data.get("data", {}).get("status")

        if status == "completed":
            video_url = status_data.get("data", {}).get("video_url")
            caption_url = status_data.get("data", {}).get("caption_url")
            if video_url:
                video = requests.get(video_url)
                if video.status_code == 200:
                    video_artifact = types.Part(
                    inline_data=types.Blob(mime_type="video/mp4", data=video.content)
                )
                await tool_context.save_artifact("a_roll.mp4", video_artifact)
                # Save captions if available
                if caption_url:
                    caption = requests.get(caption_url)
                    if caption.status_code == 200:
                        caption_artifact = types.Part(
                            inline_data=types.Blob(mime_type="text/x-ass", data=caption.content)
                        )
                        await tool_context.save_artifact(
                            "a_roll_captions.ass", caption_artifact
                        )
                        return f"Video and captions generated successfully and saved as artifacts 'a_roll.mp4' and 'a_roll_captions.ass'."
                    return "Video generated successfully and saved as artifact 'a_roll.mp4'"  
                else:
                    return  f"Error downloading video {video.status_code}"
            else:
                return "Error: No video URL in completed response"
        elif status == "failed":
            # Handle the failure case with error info
            error = status_data.get("data", {}).get("error", {})
            return f"Video generation failed: Error {error}"

        # Wait 10 seconds before next check
        await asyncio.sleep(10)

    return "Video generation timed out after 5 minutes"
