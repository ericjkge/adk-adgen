import time
import types
import requests
import os
from dotenv import load_dotenv
from google.adk.tools import ToolContext

load_dotenv()
PROJECT_ID = os.getenv("GOOGLE_PROJECT_ID")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")


async def generate_b_roll(prompt: str, tool_context: ToolContext) -> str:
    """
    Generates B-roll footage using Google's Veo 2 API.

    Args:
        prompt (str): B-roll footage portion of the AV script generated by 'script_agent'
        tool_context: Tool context to access product image (base64 format) stored in state
    Returns:
        str: Status message (success/failure of API call)
    """

    image = tool_context.state.get("base64_image")
    if not image:
        return "No base64 image found in state."

    LOCATION = "us-central1"
    MODEL_ID = "veo-2.0-generate-001"

    endpoint = f"https://{LOCATION}-aiplatform.googleapis.com/v1/projects/{PROJECT_ID}/locations/{LOCATION}/publishers/google/models/{MODEL_ID}:predictLongRunning"

    headers = {
        "Authorization": f"Bearer {GOOGLE_API_KEY}",
        "Content-Type": "application/json",
    }

    payload = {
        "instances": [{"prompt": prompt, "image": image}],
        "parameters": {
            "durationSeconds": 8,  # Can pass more parameters here as needed (duration is required)
        },
    }

    # Call Veo
    response = requests.post(endpoint, headers=headers, json=payload)
    if response.status_code != 200:
        return f"Veo API call failed: {response.status_code} - {response.text}"

    response_data = response.json()
    operation = response_data["name"]

    poll_url = f"https://{LOCATION}-aiplatform.googleapis.com/v1/{operation}"

    # Poll for 5 minutes
    for _ in range(30):
        poll = requests.get(poll_url, headers=headers)
        poll_data = poll.json()
        if "response" in poll_data:
            video_data = poll_data["response"]["video"]
            video_bytes = video_data["bytesBase64Encoded"]
            video_blob = types.Blob(
                mime_type="video/mp4", data=video_bytes.encode("utf-8")
            )
            await tool_context.save_artifact(
                "b_roll.mp4", types.Part(inline_data=video_blob)
            )
            return "B-roll video generated and saved as 'b_roll.mp4'."
        elif "error" in poll_data:
            return f"Veo generation failed: {poll_data['error']}"

        time.sleep(10)

    return "Video generation timed out after 5 minutes."
